// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "Secure": jwt Resource Client
//
// Command:
// $ goagen
// --design=github.com/hryktrd/jwtTest/design
// --out=$(GOPATH)\src\github.com\hryktrd\jwtTest
// --version=v1.3.1

package client

import (
	"context"
	"fmt"
	"net/http"
	"net/url"
)

// SecureJWTPath computes a request path to the secure action of jwt.
func SecureJWTPath() string {

	return fmt.Sprintf("/api/jwt")
}

// SecureJWT makes a request to the secure action endpoint of the jwt resource
func (c *Client) SecureJWT(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewSecureJWTRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewSecureJWTRequest create the request corresponding to the secure action endpoint of the jwt resource.
func (c *Client) NewSecureJWTRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTSigner != nil {
		if err := c.JWTSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}

// SigninJWTPath computes a request path to the signin action of jwt.
func SigninJWTPath() string {

	return fmt.Sprintf("/api/jwt/signin")
}

// Get JWT Token
func (c *Client) SigninJWT(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewSigninJWTRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewSigninJWTRequest create the request corresponding to the signin action endpoint of the jwt resource.
func (c *Client) NewSigninJWTRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.BasicAuthSigner != nil {
		if err := c.BasicAuthSigner.Sign(req); err != nil {
			return nil, err
		}
	}
	return req, nil
}
